// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: services/plaid/proto/plaid.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PlaidService_CreateLinkToken_FullMethodName     = "/plaid.PlaidService/CreateLinkToken"
	PlaidService_ExchangePublicToken_FullMethodName = "/plaid.PlaidService/ExchangePublicToken"
	PlaidService_GetAccounts_FullMethodName         = "/plaid.PlaidService/GetAccounts"
	PlaidService_GetBalance_FullMethodName          = "/plaid.PlaidService/GetBalance"
)

// PlaidServiceClient is the client API for PlaidService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlaidServiceClient interface {
	CreateLinkToken(ctx context.Context, in *CreateLinkTokenRequest, opts ...grpc.CallOption) (*CreateLinkTokenResponse, error)
	ExchangePublicToken(ctx context.Context, in *ExchangePublicTokenRequest, opts ...grpc.CallOption) (*ExchangePublicTokenResponse, error)
	GetAccounts(ctx context.Context, in *GetAccountsRequest, opts ...grpc.CallOption) (*GetAccountsResponse, error)
	GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error)
}

type plaidServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlaidServiceClient(cc grpc.ClientConnInterface) PlaidServiceClient {
	return &plaidServiceClient{cc}
}

func (c *plaidServiceClient) CreateLinkToken(ctx context.Context, in *CreateLinkTokenRequest, opts ...grpc.CallOption) (*CreateLinkTokenResponse, error) {
	out := new(CreateLinkTokenResponse)
	err := c.cc.Invoke(ctx, PlaidService_CreateLinkToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plaidServiceClient) ExchangePublicToken(ctx context.Context, in *ExchangePublicTokenRequest, opts ...grpc.CallOption) (*ExchangePublicTokenResponse, error) {
	out := new(ExchangePublicTokenResponse)
	err := c.cc.Invoke(ctx, PlaidService_ExchangePublicToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plaidServiceClient) GetAccounts(ctx context.Context, in *GetAccountsRequest, opts ...grpc.CallOption) (*GetAccountsResponse, error) {
	out := new(GetAccountsResponse)
	err := c.cc.Invoke(ctx, PlaidService_GetAccounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plaidServiceClient) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error) {
	out := new(GetBalanceResponse)
	err := c.cc.Invoke(ctx, PlaidService_GetBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlaidServiceServer is the server API for PlaidService service.
// All implementations must embed UnimplementedPlaidServiceServer
// for forward compatibility
type PlaidServiceServer interface {
	CreateLinkToken(context.Context, *CreateLinkTokenRequest) (*CreateLinkTokenResponse, error)
	ExchangePublicToken(context.Context, *ExchangePublicTokenRequest) (*ExchangePublicTokenResponse, error)
	GetAccounts(context.Context, *GetAccountsRequest) (*GetAccountsResponse, error)
	GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error)
	mustEmbedUnimplementedPlaidServiceServer()
}

// UnimplementedPlaidServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPlaidServiceServer struct {
}

func (UnimplementedPlaidServiceServer) CreateLinkToken(context.Context, *CreateLinkTokenRequest) (*CreateLinkTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLinkToken not implemented")
}
func (UnimplementedPlaidServiceServer) ExchangePublicToken(context.Context, *ExchangePublicTokenRequest) (*ExchangePublicTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangePublicToken not implemented")
}
func (UnimplementedPlaidServiceServer) GetAccounts(context.Context, *GetAccountsRequest) (*GetAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccounts not implemented")
}
func (UnimplementedPlaidServiceServer) GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedPlaidServiceServer) mustEmbedUnimplementedPlaidServiceServer() {}

// UnsafePlaidServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlaidServiceServer will
// result in compilation errors.
type UnsafePlaidServiceServer interface {
	mustEmbedUnimplementedPlaidServiceServer()
}

func RegisterPlaidServiceServer(s grpc.ServiceRegistrar, srv PlaidServiceServer) {
	s.RegisterService(&PlaidService_ServiceDesc, srv)
}

func _PlaidService_CreateLinkToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLinkTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaidServiceServer).CreateLinkToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaidService_CreateLinkToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaidServiceServer).CreateLinkToken(ctx, req.(*CreateLinkTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaidService_ExchangePublicToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangePublicTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaidServiceServer).ExchangePublicToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaidService_ExchangePublicToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaidServiceServer).ExchangePublicToken(ctx, req.(*ExchangePublicTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaidService_GetAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaidServiceServer).GetAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaidService_GetAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaidServiceServer).GetAccounts(ctx, req.(*GetAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaidService_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaidServiceServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaidService_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaidServiceServer).GetBalance(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlaidService_ServiceDesc is the grpc.ServiceDesc for PlaidService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlaidService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "plaid.PlaidService",
	HandlerType: (*PlaidServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLinkToken",
			Handler:    _PlaidService_CreateLinkToken_Handler,
		},
		{
			MethodName: "ExchangePublicToken",
			Handler:    _PlaidService_ExchangePublicToken_Handler,
		},
		{
			MethodName: "GetAccounts",
			Handler:    _PlaidService_GetAccounts_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _PlaidService_GetBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/plaid/proto/plaid.proto",
}
