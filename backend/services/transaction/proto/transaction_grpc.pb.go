// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: services/transaction/proto/transaction.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TransactionCalculator_CalculateRoundup_FullMethodName = "/transaction.TransactionCalculator/CalculateRoundup"
)

// TransactionCalculatorClient is the client API for TransactionCalculator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionCalculatorClient interface {
	// CalculateRoundup calculates the roundup amount for a given transaction
	CalculateRoundup(ctx context.Context, in *CalculateRoundupRequest, opts ...grpc.CallOption) (*CalculateRoundupResponse, error)
}

type transactionCalculatorClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionCalculatorClient(cc grpc.ClientConnInterface) TransactionCalculatorClient {
	return &transactionCalculatorClient{cc}
}

func (c *transactionCalculatorClient) CalculateRoundup(ctx context.Context, in *CalculateRoundupRequest, opts ...grpc.CallOption) (*CalculateRoundupResponse, error) {
	out := new(CalculateRoundupResponse)
	err := c.cc.Invoke(ctx, TransactionCalculator_CalculateRoundup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionCalculatorServer is the server API for TransactionCalculator service.
// All implementations must embed UnimplementedTransactionCalculatorServer
// for forward compatibility
type TransactionCalculatorServer interface {
	// CalculateRoundup calculates the roundup amount for a given transaction
	CalculateRoundup(context.Context, *CalculateRoundupRequest) (*CalculateRoundupResponse, error)
	mustEmbedUnimplementedTransactionCalculatorServer()
}

// UnimplementedTransactionCalculatorServer must be embedded to have forward compatible implementations.
type UnimplementedTransactionCalculatorServer struct {
}

func (UnimplementedTransactionCalculatorServer) CalculateRoundup(context.Context, *CalculateRoundupRequest) (*CalculateRoundupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateRoundup not implemented")
}
func (UnimplementedTransactionCalculatorServer) mustEmbedUnimplementedTransactionCalculatorServer() {}

// UnsafeTransactionCalculatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionCalculatorServer will
// result in compilation errors.
type UnsafeTransactionCalculatorServer interface {
	mustEmbedUnimplementedTransactionCalculatorServer()
}

func RegisterTransactionCalculatorServer(s grpc.ServiceRegistrar, srv TransactionCalculatorServer) {
	s.RegisterService(&TransactionCalculator_ServiceDesc, srv)
}

func _TransactionCalculator_CalculateRoundup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateRoundupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionCalculatorServer).CalculateRoundup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionCalculator_CalculateRoundup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionCalculatorServer).CalculateRoundup(ctx, req.(*CalculateRoundupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionCalculator_ServiceDesc is the grpc.ServiceDesc for TransactionCalculator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionCalculator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transaction.TransactionCalculator",
	HandlerType: (*TransactionCalculatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculateRoundup",
			Handler:    _TransactionCalculator_CalculateRoundup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/transaction/proto/transaction.proto",
}
