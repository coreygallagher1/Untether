// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: roundup.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RoundupService_RoundupTransaction_FullMethodName = "/proto.RoundupService/RoundupTransaction"
)

// RoundupServiceClient is the client API for RoundupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoundupServiceClient interface {
	RoundupTransaction(ctx context.Context, in *RoundupRequest, opts ...grpc.CallOption) (*RoundupResponse, error)
}

type roundupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoundupServiceClient(cc grpc.ClientConnInterface) RoundupServiceClient {
	return &roundupServiceClient{cc}
}

func (c *roundupServiceClient) RoundupTransaction(ctx context.Context, in *RoundupRequest, opts ...grpc.CallOption) (*RoundupResponse, error) {
	out := new(RoundupResponse)
	err := c.cc.Invoke(ctx, RoundupService_RoundupTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoundupServiceServer is the server API for RoundupService service.
// All implementations must embed UnimplementedRoundupServiceServer
// for forward compatibility
type RoundupServiceServer interface {
	RoundupTransaction(context.Context, *RoundupRequest) (*RoundupResponse, error)
	mustEmbedUnimplementedRoundupServiceServer()
}

// UnimplementedRoundupServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRoundupServiceServer struct {
}

func (UnimplementedRoundupServiceServer) RoundupTransaction(context.Context, *RoundupRequest) (*RoundupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoundupTransaction not implemented")
}
func (UnimplementedRoundupServiceServer) mustEmbedUnimplementedRoundupServiceServer() {}

// UnsafeRoundupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoundupServiceServer will
// result in compilation errors.
type UnsafeRoundupServiceServer interface {
	mustEmbedUnimplementedRoundupServiceServer()
}

func RegisterRoundupServiceServer(s grpc.ServiceRegistrar, srv RoundupServiceServer) {
	s.RegisterService(&RoundupService_ServiceDesc, srv)
}

func _RoundupService_RoundupTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoundupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoundupServiceServer).RoundupTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoundupService_RoundupTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoundupServiceServer).RoundupTransaction(ctx, req.(*RoundupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoundupService_ServiceDesc is the grpc.ServiceDesc for RoundupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoundupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RoundupService",
	HandlerType: (*RoundupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RoundupTransaction",
			Handler:    _RoundupService_RoundupTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "roundup.proto",
}
